# MERGE SORT

def merge_sort(arr):
    # Base case: if the array has one or zero elements, it's already sorted
    if len(arr) <= 1:
        return arr
    
    # Find the middle of the array
    mid = len(arr) // 2
    
    # Recursively sort the two halves
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    
    # Merge the sorted halves
    return merge(left, right)

def merge(left, right):
    sorted_list = []
    i = j = 0
    
    # Compare elements from both halves and merge them in sorted order
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            sorted_list.append(left[i])
            i += 1
        else:
            sorted_list.append(right[j])
            j += 1
    
    # Append any remaining elements from both halves
    sorted_list.extend(left[i:])
    sorted_list.extend(right[j:])
    
    return sorted_list

# Calling code
arr = [12, 9, 15, 34, 45, -3, 65, 7, 84, 55]
print("Array before sorting: ", arr)
sorted_arr = merge_sort(arr)
print("Array after sorting: ", sorted_arr)


----------------------------------------------QUICK SORT--------------------------------------------------

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    less = [x for x in arr[1:] if x <= pivot]
    greater = [x for x in arr[1:] if x > pivot]
    return quick_sort(less) + [pivot] + quick_sort(greater)

# Driver code
arr = [17, 60, 10, 5, 9, 21, 1, 15, 7]
print("Array before sorting: ", arr)
sorted_arr = quick_sort(arr)
print("Array after sorting: ", sorted_arr)

-----------------------------------------------BINARY SEARCH---------------------------------------------

def binary_search(l,n):
    sorted_list=sorted(l) 
    left=0
    right=len(l)-1
    while left<= right:      
        mid=(left+right)//2
        if(sorted_list[mid]==n):
            print("element found in list")
            return mid
        elif (sorted_list[mid]>n):
            right=mid-1
        else:
            left=mid+1
    print("element not found")

l=[2,5,3,4,9,6]
n=6
binary_search(l,n)


------------------------------------------PASCAL TRIANGLE-------------------------------------------------

n = 5
spaces = 5

for i in range(1,n+1):
    for j in range(0, spaces):
        print(' ', end='')

    c=1
    for j in range(1,i+1):
        print(' ',c,sep='',end='')
        c = c*(i-j)//j
    spaces-=1
    print()


------------------------------------------TOWER OF HANOI-----------------------------------------------
def TOH(n,a,b,c):
    if n== 1:
        print('Move disk 1 from source',a,'to destination',c)
        return
    TOH(n-1,a,c,b)
    TOH(1,a,b,c)
    TOH(n-1,b,a,c)
n = 3
TOH(n,'a','b','c')


        
